is_windows()
{
	if [ "$(uname -s | cut -b1-6)" = "CYGWIN" -o "$(uname -s | cut -b1-7)" = "MINGW32" ]
	then
		return 0
	fi
	return 1
}

mk_add_options MOZ_CO_PROJECT="all"
mk_add_options MOZ_CO_MODULE="mozilla/tools/trace-malloc mozilla/tools/rb mozilla/tools/jprof mozilla/other-licenses/libart_lgpl mozilla/js/tests mozilla/tools/footprint"
mk_add_options AUTOCLOBBER=1

VCMOZCONFIGEXT=""
if [ "$MOZ_MSVCVERSION" != "" ]
then
	VCMOZCONFIGEXT="-vc$MOZ_MSVCVERSION"
fi

mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/../obj/$(basename $MOZCONFIG)$VCMOZCONFIGEXT/

# -pedantic-errors -Wno-long-long
# -W -Wno-unused-parameter
# (CFLAGS only) -Wmissing-prototypes -Wmissing-declarations
# export needed for NSPR configure
if ! is_windows
then
	export CFLAGS="$CFLAGS -Wshadow -Wwrite-strings -fmessage-length=0 -fdiagnostics-show-option"
	export CXXFLAGS="$CXXFLAGS -Wshadow -fno-nonansi-builtins -Wwrite-strings -fmessage-length=0 -fdiagnostics-show-option -Wno-invalid-offsetof"
	if [ "$(uname -s)" != "Darwin" ]
	then
		# On Mac, -fuse-cxa-atexit causes linker errors
		# (undefined symbols: ___dso_handle)
		export CXXFLAGS="$CXXFLAGS -fuse-cxa-atexit"
	fi
fi

# Commercial tree!
#mk_add_options NS_OBJDIR=@TOPSRCDIR@/../obj-ns/$(basename $MOZCONFIG)/
#ac_add_options --with-moz-objs=../obj/$(basename $MOZCONFIG)/

#ac_add_options --disable-libxul
#ac_add_options --disable-ipc
#ac_add_options --enable-chrome-format=jar

ac_add_options --with-debug-label=dbaron

case "$(uname -s)" in
    # Linux) NCORES=$(grep "^processor	: " /proc/cpuinfo | wc -l);;
    # Also see http://stackoverflow.com/questions/150355/programmatically-find-the-number-of-cores-on-a-machine
    Linux) NCORES=$(getconf _NPROCESSORS_ONLN);;
    Darwin) NCORES=$(sysctl hw.ncpu);;
    MINGW*) NCORES=$(wmic cpu get NumberOfLogicalProcessors /Format:List | grep "^NumberOfLogicalProcessors=" | sed 's/^NumberOfLogicalProcessors=//');;
    *) NCORES=2;;
esac

MAKE_J_OPTION=$(($NCORES - 0))

# mk_add_options RUN_AUTOCONF_LOCALLY=1

ac_add_options --prefix="$topsrcdir/../obj/$(basename "$MOZCONFIG")/dist-install/"

# no longer needed for i386 Linux with gcc update to 4.1.1
# no longer needed for x86_64 Linux with Fedora Core 6
#if [ "$(uname -sm)" = "Linux x86_64" ]
#then
#	ac_cv_visibility_pragma=no
#fi

if [ "$(hostname)" = "pickering" ]
then
	CC="distcc x86_64-linux-gnu-gcc-4.4"
	CXX="distcc x86_64-linux-gnu-g++-4.4"
	export CC
	export CXX
	MAKE_J_OPTION=$(distcc -j)
fi

# cls says -jN where N is cpus+1
MOZ_MAKE_FLAGS="-j$MAKE_J_OPTION -s"
mk_add_options MOZ_MAKE_FLAGS="$MOZ_MAKE_FLAGS"

if_enable_jprof()
{
	if [ "$(uname -sm)" = "Linux i686" -o "$(uname -sm)" = "Linux x86_64" ]
	then
		ac_add_options --enable-jprof
	fi
}

if_enable_callgrind()
{
	if [ "$(uname -s)" = "Linux" ]
	then
		ac_add_options --enable-callgrind
	fi
}

if_enable_shark()
{
	if [ "$(uname -s)" = "Darwin" ]
	then
		ac_add_options --enable-shark
	fi
}

if_enable_valgrind()
{
	if [ "$(uname -s)" = "Linux" ]
	then
		ac_add_options --enable-valgrind
		ac_add_options --disable-jemalloc
	fi
}

if_enable_trace_malloc()
{
	UNAME="$(uname -sm)"
	if [ "$UNAME" = "Linux i686" -o "$UNAME" = "Linux x86_64" -o "$UNAME" = "Darwin Power Macintosh" -o "$UNAME" = "Darwin i386" ]
	then
		ac_add_options --enable-trace-malloc
	fi
	if is_windows
	then
		ac_add_options --enable-trace-malloc
	fi
}

if [ "$(uname -s)" = "Linux" ]
then
        ac_add_options --enable-dbus
fi

if [ "$(uname -s)" = "Darwin" ]
then
        ac_add_options --enable-shark
fi

# trunk (post-1.8) icon doesn't work with VC7.1 or VC8
if is_windows
then
        ac_add_options --disable-official-branding
fi

# Stylo options
ac_add_options --enable-stylo=build
mk_add_options CARGOFLAGS="--color always" # if you want colored output from rust compilation
if [ "$(uname -s)" = "Darwin" ]
then
	# Necessary on mac with Xcode >= 7 to avoid errors linking libXUL.
	export LDFLAGS=-Wl,-no_compact_unwind
fi

if is_windows
then
	HOME_WIN=$(echo "$HOME" | sed 's,^/\([a-z]\)/,\1:/,')
	ac_add_options --with-libclang-path="$HOME_WIN/.mozbuild/clang/bin"
	ac_add_options --with-clang-path="$HOME_WIN/.mozbuild/clang/bin/clang.exe"
	export LLVM_CONFIG="$HOME/.mozbuild/clang/bin/llvm-config.exe"
else
	export LLVM_CONFIG="/usr/bin/llvm-config-3.9"
fi
